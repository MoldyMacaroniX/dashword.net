---
title: Search
desc: Search our article collection on Dashword.
permalink: /search/
layout: base.njk
hasModal: true
---

<h1 class="heading">Search Dashword</h1>

<!-- SEARCH -->
<script src="https://unpkg.com/lunr/lunr.js"></script>
<!-- PAGINATE SEARCH RESULTS -->
<script src="/assets/js/purePajinate.js"></script>

<style>
    .page_navigation ul {
        display: flex;
        gap: 25px;
        justify-content: space-between;
        margin-top: 25px;
    }
    .page_navigation ul li {
        list-style-type: none;
    }
    .page_navigation ul .ellipse {
        display: none !important;
    }
</style>

<div class="search-bg" id="search-menu-bg"></div>
<div class="search" id="search-menu">
    <div id="app">

        <form onsubmit="return false" id="app-form">
            <input ref="inputField" v-model="term" placeholder="Search anything you want..." id="searchfield" value="">
            <i class="ri-search-line"></i>
            <button onclick="app.search();" class="button" id="searchbtn" ref="Btn">Search</button>
        </form>
        {# @click="search" #}
        <div v-if="results" class="results">
            {# <h1 class="title" style="margin-bottom: 20px; margin-top: 25px;">Results</h1> #}
            <div class="search-results" id="results">
                <div v-for="result in results" class="search-result">
                    {# <div class="cols">
                        <a class="image">
                            <div class="aspect">
                                <img :src="result.image" :alt="result.title" loading="lazy">
                            </div>
                        </a>
                        <div class="col">
                            <p class="result-title"><a :href="result.url"><span v-html="result.title"></span></a></p>
                            <p class="result-desc"><a :href="result.url"><span v-html="result.content"></span></a></p>
                        </div>
                    </div> #}
                    <div class="podcast post cols">
                        <a class="image" :href="result.url" v-if="result.image">
                            <div class="aspect">
                                <img :src="result.image" :alt="result.title" loading="lazy">
                            </div>
                        </a>
                        <a class="play" :href="result.url" v-else>
                            <i class="ri-play-fill"></i>
                        </a>
                        <div class="content col">
                            <a :href="result.url" class="title" style="text-transform: capitalize" v-html="result.title"></a>
                            <a :href="result.url" class="desc" v-html="result.content"></a>
                            <span class="meta">
                                <span v-html="result.author"></span> <a :href="result.url" class="date"><span v-html="result.date"></span> <i class="ri-time-line"></i></a> <span class="tags" v-html="result.tags" v-if="result.tags"></span>
                            </span>
                        </div>
                    </div>
                    {# aa #}
                </div>
            </div>
            <div v-if="noResults" class="article">
                {# <p>Sorry, no results were found. You can try the following.</p>
                <ul>
                    <li>Make sure all search terms are spelled correctly.</li>
                    <li>Try searching keywords (such as "2.2").</li>
                    <li>Include more search terms.</li>
                </ul> #}
                <div class="panel">
                    <p style="margin-top: 0; margin-bottom: 0; text-align: center;">Sorry, no results found.</p>
                </div>
            </div>
            <div class="page_navigation"></div>
            {# <div>
                <div><a href="/posts/" class="button"><i class="ri-arrow-left-line"></i> Previous</a></div>
                <div><a href="/posts/3/" class="button">Next <i class="ri-arrow-right-line"></i></a></div>
            </div> #}
        </div>

    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script>
const app = new Vue({
    el:'#app',
    data:{
        docs:null,
        idx:null,
        term:'',
        results:null
    },
    async created() {
        let result = await fetch('/index.json');
        docs = await result.json();
        // assign an ID so it's easier to look up later, it will be the same as index
        this.idx = lunr(function () {
            this.ref('id');
            this.field('title');
            this.field('content');
            this.field('date');
            this.field('image');
            this.field('tags');
            this.field('author');
            this.field('authorKey');
            docs.forEach(function (doc, idx) {
                doc.id = idx;
                this.add(doc); 
            }, this);
        });
        this.docs = docs;
    },
    computed: {
        noResults() {
            return this.results.length === 0;
        }
    },
    methods:{
        search() {
            //if () {}
            this.term = this.$refs.inputField.value;
            //console.log('search', this.term);
            if (this.term != "") {
                let results = this.idx.search(this.term);
                // we need to add title, url from ref
                results.forEach(r => {
                    r.title = this.docs[r.ref].title;
                    r.url = this.docs[r.ref].url;
                    r.tags = this.docs[r.ref].tags;
                    r.date = this.docs[r.ref].date;
                    r.content = this.docs[r.ref].content;
                    r.image = this.docs[r.ref].image;
                    r.author = this.docs[r.ref].author;
                    r.authorKey = this.docs[r.ref].authorKey;
                });
                this.results = results;
            } else {
                console.log("put something in the search field idot");
                openMe();
            }
        }
    }
});
</script>
<!-- END SEARCH -->

<script>
// https://stackoverflow.com/a/901144
const params = new Proxy(new URLSearchParams(window.location.search), {
  get: (searchParams, prop) => searchParams.get(prop),
});

let value = params.search; 
console.log("On load search term: " + value);
document.getElementById("searchfield").focus();
document.getElementById("searchfield").select();
document.getElementById("searchfield").value = value;

var appInt = setInterval(appLoad, 100);

function appLoad() {
    if (value != null) {
        try {
            console.log("Clicking search...");
            document.getElementById("searchbtn").click();
            //clearInterval(appInt);
        } catch (error) {
            console.log("App not loaded yet...");
        }
    } else {
        console.log("No search provided on load");
        clearInterval(appInt);
    }
}

{# this.$refs.Btn.click(); #}
{# app.search(); #}
{# document.getElementById("searchbtn").click(); #}

{# let oList = document.getElementById('app-form'),
optiono = {
    childList: true
},
observer3 = new MutationObserver(mCallback);
function mCallback(mutations) {
    for (let mutation of mutations) {
        if (mutation.type === 'childList') {
            console.log('App loaded!');
        }
    }
}
observer3.observe(oList, optiono); #}

{# setTimeout(function() {
    document.getElementById("searchbtn").click();
}, 1000) #}
</script>

<script>
function openMe() {
    console.log("open");
    //modal.open();
    openDialog("modalSearch");
}
</script>

{# PAGINATION #}
<script>

    var checkNew = true;

    let mList = document.getElementById('app'),
    options = {
        childList: true
    },
    observer = new MutationObserver(mCallback);
    function mCallback(mutations) {
        for (let mutation of mutations) {
            if (mutation.type === 'childList') {
                console.log('Mutation Detected: A child node has been added or removed.');
                clearInterval(appInt);
                testPag();
                checkForBrokenImages();
            }
        }
    }
    observer.observe(mList, options);
    
    function testPag () {
        try {
            new purePajinate ({
                pageLinksToDisplay: 0,
                itemsPerPage: 10,
                containerSelector: '#results',
                itemSelector: '.search-result',
                navigationSelector: '.page_navigation',
                defaultClass: '',
                activeClass: "active",
                disabledClass: "disabled",
                navLabelPrev: '<i class="ri-arrow-left-line"></i> Previous',
                navLabelNext: 'Next <i class="ri-arrow-right-line"></i>'
            });
        } catch (error) {
            console.log("smth went wrong");
        }
        // document.querySelectorAll(".page_navigation ul li a").addEventListener("click", topScreen);
        document.querySelectorAll('.page_navigation ul li a').forEach(link => {
            link.addEventListener('click', (e) => {
                console.log('Page changed!');
                document.querySelector("html").style.scrollBehavior = "auto";
                setTimeout(function() {
                    window.scrollBy(0, -2000);
                    document.querySelector("html").style.scrollBehavior = "smooth";
                }, 0)
            });
        });
        if (document.getElementById("results").childElementCount < 11) {
            console.log("Not enough elements for pagination");
            document.querySelector(".previous_link").classList.add("disabled");
            document.querySelector(".next_link").classList.add("disabled");
        }
        if (checkNew) {
            checkForNewResults();
        }
    }
    function checkForNewResults() {
        checkNew = false;
        let nList = document.getElementById('results'),
        option = {
            childList: true
        },
        observer2 = new MutationObserver(mCallback);
        function mCallback(mutations) {
            for (let mutation of mutations) {
                if (mutation.type === 'childList') {
                    console.log('Mutation Detected: A child node has been added or removed.');
                    testPag();
                }
            }
        }
        observer2.observe(nList, option);
    }

</script>